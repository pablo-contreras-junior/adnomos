Middlewares são especialmente úteis para definir regras de autenticação e escopo. Segue, abaixo, um guia
para criar middlewares e impementa-los:

   1... Instalando o Laravel Breeze:
	Rode os seguintes comandos em sequiencia:

	   >composer require laravel/breeze --dev 
	   >php artisan breeze:install
	   >php artisan migrate

	Isso criará automaticamente uma estrutura de autenticação com funcionalidades básicas, como
	login, logout, cadastro, recuperação de senha, etc.


	
   2... Atualizando a Tabela:
	Adicione a coluna 'role' a tabela Users do banco de dados. Ela deve ser uma enueração das regras
	que você deseja estabelecer. Para isso, iremos modificar diretamente a migração 'create_table_users':

	   $table->enum('role',['usuario_simples','administrador'])->default('usuario_simples');

	Feito isso, devemos atualizar a tabela em ordem de salvar a nova coluna com a regra. Para isso, nós
	podemos — caso ainda não tenhamos feito — rodar o comando    php artisan migrate:fresh    que irá
	excluir todas as tabelas e construir devono, com as novas regras.



   3... Atualizando o Modelo:
	Junto com a tabela 'users', devemos modificar o modelo User, a fim de adicionar a regra aos preenchiveis
	do objeto. Adicionaremos 'role' ao array    $fillable    do modelo User:

	   protected $fillable = ['name','email','password', 'role']

	Será com base nessa propriedade que a validação se baseará. Agora faremos métodos para testar a regra
	de uso do modelo User. Ainda no modelo User, adicione os métodos:

	   public function isUsuarioSimples(){
		return $this->role === 'usuario_simples';
	   }

	   public fuction isAdministrador(){
		return $this->role === 'administrador';
	   }



   4... Criando um Middlware Para Validação:
	Agora devemos rodar o comando    php artisan make:middleware Verificador    para criar um novo middleware e,
	depois, modificaremos o método 'handle' a fim de testar a regra de acesso e retornar um erro caso ela falhe:

	   use Illuminate\Support\Facades\Auth;
	
	   public function handle(Request $request, Closure $next){
		if(Auth::check() && Auth::user()->isAdministrador()){
		     return $next($request);
		}
	        return back()->with('error','acesso negado');
	   }



   5... Apelidando o Middleware (opcional):
	Antes de aplica-lo de forma concreta, é interessante criar um alias (apelido) para o middleware. Faremos isso
	no arquivo 'app.php' dentro de Bootstrap:
		
	   use App\Http\Middleware\Verificador.php;

	   ->withMiddleware(function(Middleware $middleware){
		$middleware->alias([
		     'check.admin' => Verificador::class,
		]);
	   })

	Caso decida pular essa etapa, basta adicionar o nome completo do middleware a rota protegida, como mostrado
	no exemplo:

	   Route::get('/admin',function(){
	       // comandos...
	   })->middleware(Verificador::class);


E pronto! Podemos aplicar o middleware criado a qualquer rota que desejarmos.
	
