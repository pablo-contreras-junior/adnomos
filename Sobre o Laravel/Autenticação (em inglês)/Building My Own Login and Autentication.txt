Building my own login and autentication system whit Laravel:
(step by step)

PART ONE: Creating Controllers, Routes and Views 

   1. Routes
   We gonna make two routes for each funcionality. They will have a 'get' and 'post' methods, in addition to a 'logout' post method and the proctected routes. 
   Exemple:
	   Route::get('login',[AuthController::class, 'showLoginForm'])->name('login');
	   Route::post('login',[AuthController::class, 'login']);
           Route::get('register',[AuthController::class, 'showRegisterForm'])->name('register');
	   Route::post('register',[AuthController::class, 'register']);
	   Route::post('logout', [AuthContoroller::class, 'logout'])->name('logout');

	   Route:get('dashboard', function(){
	      return "Welcome to dashboard";
	   })->middleware('auth');

   Above, we have public routs — thereby the users would be able to register and login theirselvs — and a proctected route, which is where the logged-in user
   information should be.


   2. Creating the AuthController and their methods
   Now we gonna built the AuthController by running 'php artisan make:controller AuthController' on Windows CLI. After that, we have to create the methods that
   our routes will use. 
   Exemple:

	   //We have to import those classes:
	   use App\Models\User;
	   use Illuminate\Http\Request;
	   use Illuminate\Support\Facades\Hash;
	   use Illuminate\Support\Facades\Validator;
	   use Illuminate\Support\Facades\Auth;
	
	   public function showRegisterForm()
	   {
	      return view('auth.register');
	   }

	   public function showLoginForm()
	   {
	      return view('auth.login');
	   }

	   // every function for a 'post' method needs a request parameter
	   public function register(Request $request)
	   {
	      $validator = Validator::make($request->all(),[
		 'name' => 'required|string|max:255',
	   	 'email' => 'required|string|email|unique:users',
		 'password' => 'required|min:6'
	      ]);

	      if($validator->fails())
	      {
		 return redirect()->route('register')->withErrors($validator);
	      }
	
	      User::create([
		 'name' => $request->name,
		 'email' => $request->email,
		 'password' => Hash::make($request->password),
	      ]);
	
	      return redirect()->route->('login')
	   }

	   public function login(Request $request)
	   {
	      $userData = $request->only('email','password');
	      if(Auth::attempt($userData))
	      {
	         return redirect()->intended('dashboard');
	      }	
	      return back()->withErrors([
		 'email' => 'the provided credentials do not match our records'
	      ]);
	      
	   }

	   public function logout(Request $request)
	   {
	      Auth::logout();
	      return redirect()->route('login');
	   }

   Above, we have two functions that display views — for login and register — and two functions in which we can store data user and acess data user. In additi-
   on with a logout method.


   3. Creating the View(s)
   In this step, we have to create the views in 'Resources\Views' that will display both login and register forms to the user.
   Exemple: I don't need an exemple because is just to create two HTML pages, one for register and another for login.
	   
IMPORTANT INFORM -> The Middleware 'auth' is included by default in Laravel, so we don't need to manualy create him.


   4. Running the migrations
   Now it's just to run the command 'php artisan migrate' on terminal and the 'users' table in the database.



      

   